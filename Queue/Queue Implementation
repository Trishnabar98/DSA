//Queue implementation using array
// Online C compiler to run C online.
// Write C code in this online editor and run it.

#include <stdio.h>
#define size 5
int queue[size];
int front=-1;
int rear=-1;
void enqueue(int data)
{
    if(rear==size-1)
    {
        printf("\nqueue is full\n");
    }
    else
    {
        if(front==-1)
            front=0;
        rear++;
        queue[rear]=data;
    }
}
void dequeue()
{   
    if(front==-1)
    {
        printf("\nqueue is empty\n");
        
    }else
    {
        printf("\ndeleted item is:%d\n",queue[front]);
        front++;
        if(front>rear)
            front=rear=-1;
    }
}
void display()
{ 
    if(rear==-1)
    {
        printf("queue is empty\n");
        
    }
    else{
       
        for(int i=front;i<=rear;i++)
            printf("%d ",queue[i]);
    }
    printf("\n");
}

int main() {
    // printf() displays the string inside quotation
    enqueue(1);
    enqueue(100);
    enqueue(200);
    enqueue(112);
    enqueue(341);
    
    display();
    
    dequeue();
    dequeue();
    dequeue();
    dequeue();
    dequeue();
    dequeue();
    
    display();
    return 0;
}

////Queue implementation using LinkedList


// Online C compiler to run C online.
// Write C code in this online editor and run it.

#include <stdio.h>
#include <stdlib.h>
struct queue
{
    int data;
    struct queue* next;
};
struct queue *front;
struct queue *rear;
void enqueue()
{
    struct queue* ptr;
    ptr=(struct queue*)malloc(sizeof(struct queue));
    
    int item;
    if(ptr==NULL)
    
    {
        printf("\nQueue is overflow\n");
        return;
    }
    else
    {   printf("Enter the value:\t");
        scanf("%d",&item);
        
        ptr->data=item;
        if(front==NULL)
        {
            front=ptr;
            rear=ptr;
            front->next=NULL;
            rear->next=NULL;
        }
        else
        {
            rear->next=ptr;
            rear=ptr;
            ptr=ptr->next;
        }
    }
}

void dequeue()
{
    struct queue* ptr;
    if(front==NULL)
    {
        printf("Queue is underflow");
        return;
    }
    else
    {
        ptr=front;
        front=front->next;
        free(ptr);
    }
}

void display()
{
    struct queue* ptr;
    if(front==NULL)
    {
        printf("Queue is empty\n");
    }
    else
    {
        printf("\nQueue:\t");
        ptr=front;
        while(ptr!=NULL)
        {
            printf("\n%d\n",ptr->data);
            ptr=ptr->next;
        }
    }
}
int main() {
    int choice;
    while(choice!=4)
    {
        printf("\n*********Queue operation using linked list**********\n");
       
        printf("\n1.insert an element\n2.Delete an element\n3.Display the queue\n4.Exit\n");
         printf("\nEnter your choice!!!!\n");
         scanf("%d",&choice);
         switch(choice)
         {
             case 1:
                    enqueue();
                    break;
            case 2:  
                     dequeue();  
                     break;  
            case 3:  
                    display();  
                    break;  
            case 4:  
                    exit(0);  
                    break;  
            default:   
                    printf("\nEnter valid choice??\n");          
         }
        
    }
    return 0;
}
