Qs:-
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5
==================================================================================================================================



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* newNode = new ListNode(0);
    ListNode* p2 = head;
    ListNode* p1 = head;
    ListNode* p = newNode;
    while(1)
    {
        int i = 0;
        while(p2 != NULL && i < k)
        {
            i++;
            p2 = p2->next;
        }

        if (i != k)
            break;

        while(p1 != p2)
        {
            //insert p1 after p
            ListNode* next = p1->next;
            p1->next = p->next;
            p->next = p1;
            p1 = next;
        }

        //move p to end of the new list
        while(p != NULL &&p->next != NULL)
            p = p->next;
    }
    if (p != NULL)
        p->next = p1;
    head = newNode->next;
    delete newNode;
    return head;
        
    }
};
