Qs:-

Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
=================================================================================================================================


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* rotateRight(struct ListNode* head, int k){
    struct ListNode *p=head;
    int c=0;
    while(p)
    {
        p=p->next;
        c++;
    }
    if(c==0)return NULL;
    k=k%c;
    if(c==k||head==NULL||head->next==NULL||k==0)
        return head;
    int cut=c-k-1;
    p=head;
    while(cut-->0)
    {
        p=p->next;
    }
   struct ListNode*new=p->next;
    p->next=NULL;
    
    p=new;
    while(p && p->next)
    {   p=p->next;
    }
    p->next=head;
    return new;

}
