Qs:-
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
====================================================================================================================================


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode* rslt=(struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* head=rslt;
    int carry=0;
    int sum;
    while(l1|| l2)
    {
        if(!l1)
        {
            sum=(l2->val+carry);
            l2=l2->next;
        }
        else if(!l2)
        {
            sum=(l1->val+carry);
            l1=l1->next;
        }
        else
        {
            sum=(l1->val+l2->val+carry);
            l1=l1->next;
            l2=l2->next;
        }
        
        
        if(sum>=10)
        {
            carry=1;
        }
        else
        {
            carry=0;
        }
        rslt->val=sum%10;
        
        if(l1|| l2)
        {
            rslt->next= (struct ListNode*)malloc(sizeof( struct ListNode));
            rslt=rslt->next;
        }
        
        
    }  
        
        
        if(carry)
        {
            rslt->next= (struct ListNode*)malloc(sizeof( struct ListNode));
            rslt->next->val=1;
            rslt->next->next=NULL;
        }
        else
        {
            rslt->next=NULL;
        }
        return head;
    

}
