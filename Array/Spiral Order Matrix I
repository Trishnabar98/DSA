Qs:-
Given a matrix of m * n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example:

Given the following matrix:

[
    [ 1, 2, 3 ],
    [ 4, 5, 6 ],
    [ 7, 8, 9 ]
]

You should return

[1, 2, 3, 6, 9, 8, 7, 4, 5]

==========================================================================================================================================================================

/**
 * @input A : Read only ( DON'T MODIFY ) 2D integer array 
 * @input n11 : Integer array's ( A ) rows
 * @input n12 : Integer array's ( A ) columns
 * 
 * @Output Integer array. You need to malloc memory, and fill the length in len1
 */
int* spiralOrder(const int** A, int n11, int n12, int *len1) {
    *len1=n11*n12;
    int *rslt=(int *)malloc(*len1 * sizeof(int));
    int index=0;
    int t=0,b=n11-1;
    int l=0,r=n12-1;
    int i=0;
    int dir=0;
    while(t<=b && l<=r)
    {
     if(dir==0)
     {
         for(i=l;i<=r;i++)
         {
             rslt[index]=A[t][i];
             index++;
         }
        
         t++;
        dir=1;
     }
     else
     {
         if(dir==1)
         {
             for(i=t;i<=b;i++)
             {
                 rslt[index]=A[i][r];
                 index++;
             }
             dir=2;
             r--;
          
         }
         else
             {
                    if(dir==2)
                 {
                     for(i=r;i>=l;i--)
                     {
                         rslt[index]=A[b][i];
                         index++;
                     }
                     dir=3;
                     b--;
                     
                 }
                else
                     {
                             if(dir==3)
                         {
                             for(i=b;i>=t;i--)
                             {
                                 rslt[index]=A[i][l];
                                 index++;
                             }
                             
                             l++;
                             dir=0;
                         }
                    }
            
            }
        }
    }
    return rslt;
    	 
}

